### Starting build.
# Target: Main.ml.depends, tags: { extension:ml, file:Main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules Main.ml > Main.ml.depends # cached
# Target: AllocatedtoMips.ml.depends, tags: { extension:ml, file:AllocatedtoMips.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules AllocatedtoMips.ml > AllocatedtoMips.ml.depends # cached
# Target: AllocatedAst.ml.depends, tags: { extension:ml, file:AllocatedAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules AllocatedAst.ml > AllocatedAst.ml.depends # cached
# Target: IrAst.ml.depends, tags: { extension:ml, file:IrAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules IrAst.ml > IrAst.ml.depends
# Target: GotoAst.ml.depends, tags: { extension:ml, file:GotoAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules GotoAst.ml > GotoAst.ml.depends # cached
# Target: UntypedAst.ml.depends, tags: { extension:ml, file:UntypedAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules UntypedAst.ml > UntypedAst.ml.depends # cached
# Target: SourceAst.ml.depends, tags: { extension:ml, file:SourceAst.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceAst.ml > SourceAst.ml.depends # cached
# Target: SourceAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourceAst.cmo, file:SourceAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourceAst.cmo SourceAst.ml # cached
# Target: UntypedAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:UntypedAst.cmo, file:UntypedAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o UntypedAst.cmo UntypedAst.ml # cached
# Target: GotoAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:GotoAst.cmo, file:GotoAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o GotoAst.cmo GotoAst.ml # cached
# Target: IrAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:IrAst.cmo, file:IrAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o IrAst.cmo IrAst.ml
+ ocamlfind ocamlc -c -w -40 -o IrAst.cmo IrAst.ml
File "IrAst.ml", line 43, characters 24-467:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(ProcCall (_, _)|FunCall (_, _, _))
# Target: Mips.ml.depends, tags: { extension:ml, file:Mips.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules Mips.ml > Mips.ml.depends # cached
# Target: Mips.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Mips.cmo, file:Mips.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o Mips.cmo Mips.ml # cached
# Target: AllocatedAst.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:AllocatedAst.cmo, file:AllocatedAst.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o AllocatedAst.cmo AllocatedAst.ml
# Target: GototoIr.ml.depends, tags: { extension:ml, file:GototoIr.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules GototoIr.ml > GototoIr.ml.depends # cached
# Target: IrDeadCodeElim.ml.depends, tags: { extension:ml, file:IrDeadCodeElim.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules IrDeadCodeElim.ml > IrDeadCodeElim.ml.depends # cached
# Target: IrLiveness.ml.depends, tags: { extension:ml, file:IrLiveness.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules IrLiveness.ml > IrLiveness.ml.depends # cached
# Target: IrLiveness.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:IrLiveness.cmo, file:IrLiveness.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o IrLiveness.cmo IrLiveness.ml
# Target: IrtoAllocated.ml.depends, tags: { extension:ml, file:IrtoAllocated.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules IrtoAllocated.ml > IrtoAllocated.ml.depends # cached
# Target: GraphColoring.ml.depends, tags: { extension:ml, file:GraphColoring.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules GraphColoring.ml > GraphColoring.ml.depends # cached
# Target: Graph.ml.depends, tags: { extension:ml, file:Graph.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules Graph.ml > Graph.ml.depends # cached
# Target: Graph.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Graph.cmo, file:Graph.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o Graph.cmo Graph.ml # cached
# Target: GraphColoring.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:GraphColoring.cmo, file:GraphColoring.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o GraphColoring.cmo GraphColoring.ml # cached
# Target: IrInterferenceGraph.ml.depends, tags: { extension:ml, file:IrInterferenceGraph.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules IrInterferenceGraph.ml > IrInterferenceGraph.ml.depends # cached
# Target: IrInterferenceGraph.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:IrInterferenceGraph.cmo, file:IrInterferenceGraph.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o IrInterferenceGraph.cmo IrInterferenceGraph.ml
# Target: SourceInterpreter.ml.depends, tags: { extension:ml, file:SourceInterpreter.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceInterpreter.ml > SourceInterpreter.ml.depends # cached
# Target: SourceLexer.mll, tags: { extension:mll, file:SourceLexer.mll, lexer, ocaml, ocamllex, quiet, traverse }
ocamllex.opt -q SourceLexer.mll # cached
# Target: SourceLexer.ml.depends, tags: { extension:ml, file:SourceLexer.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceLexer.ml > SourceLexer.ml.depends # cached
# Target: SourceParser.mly.depends, tags: { extension:mly, file:SourceParser.mly, infer, menhir_ocamldep, ocaml, ocamldep, quiet, traverse }
menhir --raw-depend --ocamldep 'ocamlfind ocamldep -modules' SourceParser.mly > SourceParser.mly.depends # cached
# Target: SourceParser.mly, tags: { byte, compile, extension:ml, extension:mly, file:SourceParser.ml, file:SourceParser.mly, infer, menhir, ocaml, parser, quiet, traverse }
menhir --ocamlc 'ocamlfind ocamlc -w -40' --infer SourceParser.mly
+ menhir --ocamlc 'ocamlfind ocamlc -w -40' --infer SourceParser.mly
File "SourceParser.mly", line 108, characters 0-8:
Warning: symbol fun_decl is unreachable from any of the start symbol(s).
File "SourceParser.mly", line 103, characters 0-9:
Warning: symbol fun_decls is unreachable from any of the start symbol(s).
File "SourceParser.mly", line 113, characters 0-10:
Warning: symbol parameters is unreachable from any of the start symbol(s).
File "SourceParser.mly", line 34, characters 0-4:
Warning: symbol prog is unreachable from any of the start symbol(s).
File "SourceParser.mly", line 118, characters 0-14:
Warning: symbol typid_in_param is unreachable from any of the start symbol(s).
Warning: one state has shift/reduce conflicts.
Warning: 4 shift/reduce conflicts were arbitrarily resolved.
File "SourceParser.mly", line 99, characters 1-1:
Warning: production expr_in_arg -> is never reduced.
Warning: in total, 1 productions are never reduced.
# Target: SourceParser.mli.depends, tags: { extension:mli, file:SourceParser.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceParser.mli > SourceParser.mli.depends # cached
# Target: SourceParser.cmi, tags: { byte, compile, extension:mli, file:SourceParser.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourceParser.cmi SourceParser.mli
# Target: SourceTypeChecker.ml.depends, tags: { extension:ml, file:SourceTypeChecker.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceTypeChecker.ml > SourceTypeChecker.ml.depends # cached
# Target: SourcetoUntyped.ml.depends, tags: { extension:ml, file:SourcetoUntyped.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourcetoUntyped.ml > SourcetoUntyped.ml.depends # cached
# Target: UntypedtoGoto.ml.depends, tags: { extension:ml, file:UntypedtoGoto.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules UntypedtoGoto.ml > UntypedtoGoto.ml.depends # cached
# Target: AllocatedtoMips.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:AllocatedtoMips.cmo, file:AllocatedtoMips.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o AllocatedtoMips.cmo AllocatedtoMips.ml
+ ocamlfind ocamlc -c -w -40 -o AllocatedtoMips.cmo AllocatedtoMips.ml
File "AllocatedtoMips.ml", line 48, characters 65-917:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(ProcCall (_, _)|FunCall (_, _, _))
# Target: GototoIr.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:GototoIr.cmo, file:GototoIr.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o GototoIr.cmo GototoIr.ml
+ ocamlfind ocamlc -c -w -40 -o GototoIr.cmo GototoIr.ml
File "GototoIr.ml", line 66, characters 4-308:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: IrDeadCodeElim.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:IrDeadCodeElim.cmo, file:IrDeadCodeElim.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o IrDeadCodeElim.cmo IrDeadCodeElim.ml
# Target: IrtoAllocated.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:IrtoAllocated.cmo, file:IrtoAllocated.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o IrtoAllocated.cmo IrtoAllocated.ml
# Target: SourceInterpreter.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourceInterpreter.cmo, file:SourceInterpreter.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourceInterpreter.cmo SourceInterpreter.ml
+ ocamlfind ocamlc -c -w -40 -o SourceInterpreter.cmo SourceInterpreter.ml
File "SourceInterpreter.ml", line 16, characters 29-500:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
File "SourceInterpreter.ml", line 33, characters 26-501:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: SourceLexer.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourceLexer.cmo, file:SourceLexer.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourceLexer.cmo SourceLexer.ml
# Target: SourceTypeChecker.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourceTypeChecker.cmo, file:SourceTypeChecker.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourceTypeChecker.cmo SourceTypeChecker.ml
+ ocamlfind ocamlc -c -w -40 -o SourceTypeChecker.cmo SourceTypeChecker.ml
File "SourceTypeChecker.ml", line 25, characters 30-411:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
File "SourceTypeChecker.ml", line 44, characters 24-298:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: SourcetoUntyped.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:SourcetoUntyped.cmo, file:SourcetoUntyped.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o SourcetoUntyped.cmo SourcetoUntyped.ml
# Target: UntypedtoGoto.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:UntypedtoGoto.cmo, file:UntypedtoGoto.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o UntypedtoGoto.cmo UntypedtoGoto.ml
+ ocamlfind ocamlc -c -w -40 -o UntypedtoGoto.cmo UntypedtoGoto.ml
File "UntypedtoGoto.ml", line 22, characters 59-1129:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
# Target: Main.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:Main.cmo, file:Main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -w -40 -o Main.cmo Main.ml
# Target: SourceAst.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceAst.cmx, file:SourceAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourceAst.cmx SourceAst.ml
+ ocamlfind ocamlopt -c -w -40 -o SourceAst.cmx SourceAst.ml
File "SourceAst.ml", line 89, characters 27-218:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
File "SourceAst.ml", line 98, characters 26-462:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
# Target: UntypedAst.cmx, tags: { compile, extension:cmx, extension:ml, file:UntypedAst.cmx, file:UntypedAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o UntypedAst.cmx UntypedAst.ml
# Target: GotoAst.cmx, tags: { compile, extension:cmx, extension:ml, file:GotoAst.cmx, file:GotoAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o GotoAst.cmx GotoAst.ml
# Target: IrAst.cmx, tags: { compile, extension:cmx, extension:ml, file:IrAst.cmx, file:IrAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o IrAst.cmx IrAst.ml
+ ocamlfind ocamlopt -c -w -40 -o IrAst.cmx IrAst.ml
File "IrAst.ml", line 43, characters 24-467:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(ProcCall (_, _)|FunCall (_, _, _))
# Target: Mips.cmx, tags: { compile, extension:cmx, extension:ml, file:Mips.cmx, file:Mips.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o Mips.cmx Mips.ml # cached
# Target: AllocatedAst.cmx, tags: { compile, extension:cmx, extension:ml, file:AllocatedAst.cmx, file:AllocatedAst.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o AllocatedAst.cmx AllocatedAst.ml
# Target: IrLiveness.cmx, tags: { compile, extension:cmx, extension:ml, file:IrLiveness.cmx, file:IrLiveness.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o IrLiveness.cmx IrLiveness.ml
# Target: Graph.cmx, tags: { compile, extension:cmx, extension:ml, file:Graph.cmx, file:Graph.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o Graph.cmx Graph.ml # cached
# Target: GraphColoring.cmx, tags: { compile, extension:cmx, extension:ml, file:GraphColoring.cmx, file:GraphColoring.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o GraphColoring.cmx GraphColoring.ml # cached
# Target: IrInterferenceGraph.cmx, tags: { compile, extension:cmx, extension:ml, file:IrInterferenceGraph.cmx, file:IrInterferenceGraph.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o IrInterferenceGraph.cmx IrInterferenceGraph.ml
# Target: SourceParser.ml.depends, tags: { extension:ml, file:SourceParser.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -modules SourceParser.ml > SourceParser.ml.depends # cached
# Target: SourceParser.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceParser.cmx, file:SourceParser.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourceParser.cmx SourceParser.ml
+ ocamlfind ocamlopt -c -w -40 -o SourceParser.cmx SourceParser.ml
File "SourceParser.ml", line 1208, characters 13-14:
Warning 26: unused variable c.
# Target: AllocatedtoMips.cmx, tags: { compile, extension:cmx, extension:ml, file:AllocatedtoMips.cmx, file:AllocatedtoMips.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o AllocatedtoMips.cmx AllocatedtoMips.ml
+ ocamlfind ocamlopt -c -w -40 -o AllocatedtoMips.cmx AllocatedtoMips.ml
File "AllocatedtoMips.ml", line 48, characters 65-917:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
(ProcCall (_, _)|FunCall (_, _, _))
# Target: GototoIr.cmx, tags: { compile, extension:cmx, extension:ml, file:GototoIr.cmx, file:GototoIr.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o GototoIr.cmx GototoIr.ml
+ ocamlfind ocamlopt -c -w -40 -o GototoIr.cmx GototoIr.ml
File "GototoIr.ml", line 66, characters 4-308:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: IrDeadCodeElim.cmx, tags: { compile, extension:cmx, extension:ml, file:IrDeadCodeElim.cmx, file:IrDeadCodeElim.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o IrDeadCodeElim.cmx IrDeadCodeElim.ml
# Target: IrtoAllocated.cmx, tags: { compile, extension:cmx, extension:ml, file:IrtoAllocated.cmx, file:IrtoAllocated.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o IrtoAllocated.cmx IrtoAllocated.ml
# Target: SourceInterpreter.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceInterpreter.cmx, file:SourceInterpreter.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourceInterpreter.cmx SourceInterpreter.ml
+ ocamlfind ocamlopt -c -w -40 -o SourceInterpreter.cmx SourceInterpreter.ml
File "SourceInterpreter.ml", line 16, characters 29-500:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
File "SourceInterpreter.ml", line 33, characters 26-501:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: SourceLexer.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceLexer.cmx, file:SourceLexer.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourceLexer.cmx SourceLexer.ml
# Target: SourceTypeChecker.cmx, tags: { compile, extension:cmx, extension:ml, file:SourceTypeChecker.cmx, file:SourceTypeChecker.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourceTypeChecker.cmx SourceTypeChecker.ml
+ ocamlfind ocamlopt -c -w -40 -o SourceTypeChecker.cmx SourceTypeChecker.ml
File "SourceTypeChecker.ml", line 25, characters 30-411:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
File "SourceTypeChecker.ml", line 44, characters 24-298:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
FunCall _
# Target: SourcetoUntyped.cmx, tags: { compile, extension:cmx, extension:ml, file:SourcetoUntyped.cmx, file:SourcetoUntyped.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o SourcetoUntyped.cmx SourcetoUntyped.ml
# Target: UntypedtoGoto.cmx, tags: { compile, extension:cmx, extension:ml, file:UntypedtoGoto.cmx, file:UntypedtoGoto.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o UntypedtoGoto.cmx UntypedtoGoto.ml
+ ocamlfind ocamlopt -c -w -40 -o UntypedtoGoto.cmx UntypedtoGoto.ml
File "UntypedtoGoto.ml", line 22, characters 59-1129:
Warning 8: this pattern-matching is not exhaustive.
Here is an example of a case that is not matched:
ProcCall _
# Target: Main.cmx, tags: { compile, extension:cmx, extension:ml, file:Main.cmx, file:Main.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -w -40 -o Main.cmx Main.ml
# Target: Main.native, tags: { dont_link_with, extension:native, file:Main.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg SourceAst.cmx UntypedAst.cmx GotoAst.cmx IrAst.cmx AllocatedAst.cmx Mips.cmx AllocatedtoMips.cmx GototoIr.cmx Graph.cmx GraphColoring.cmx IrLiveness.cmx IrDeadCodeElim.cmx IrInterferenceGraph.cmx IrtoAllocated.cmx SourceInterpreter.cmx SourceParser.cmx SourceLexer.cmx SourceTypeChecker.cmx SourcetoUntyped.cmx UntypedtoGoto.cmx Main.cmx -o Main.native
# Compilation successful.
