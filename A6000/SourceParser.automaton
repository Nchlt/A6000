State 0:
main' -> . main [ # ]
-- On MAIN shift to state 1
-- On main shift to state 24

State 1:
main -> MAIN . BEGIN INT IDENT END BEGIN var_decls instructions END EOF [ # ]
-- On BEGIN shift to state 2

State 2:
main -> MAIN BEGIN . INT IDENT END BEGIN var_decls instructions END EOF [ # ]
-- On INT shift to state 3

State 3:
main -> MAIN BEGIN INT . IDENT END BEGIN var_decls instructions END EOF [ # ]
-- On IDENT shift to state 4

State 4:
main -> MAIN BEGIN INT IDENT . END BEGIN var_decls instructions END EOF [ # ]
-- On END shift to state 5

State 5:
main -> MAIN BEGIN INT IDENT END . BEGIN var_decls instructions END EOF [ # ]
-- On BEGIN shift to state 6

State 6:
main -> MAIN BEGIN INT IDENT END BEGIN . var_decls instructions END EOF [ # ]
-- On var_decls shift to state 7
-- On PRINT reduce production var_decls -> 
-- On END reduce production var_decls -> 

State 7:
main -> MAIN BEGIN INT IDENT END BEGIN var_decls . instructions END EOF [ # ]
-- On PRINT shift to state 8
-- On instructions shift to state 18
-- On instruction shift to state 21
-- On END reduce production instructions -> 

State 8:
instruction -> PRINT . BEGIN expression END [ SEMI ]
-- On BEGIN shift to state 9

State 9:
instruction -> PRINT BEGIN . expression END [ SEMI ]
-- On IDENT shift to state 10
-- On location shift to state 11
-- On expression shift to state 12

State 10:
location -> IDENT . [ PLUS MULT END ]
-- On PLUS reduce production location -> IDENT 
-- On MULT reduce production location -> IDENT 
-- On END reduce production location -> IDENT 

State 11:
expression -> location . [ PLUS MULT END ]
-- On PLUS reduce production expression -> location 
-- On MULT reduce production expression -> location 
-- On END reduce production expression -> location 

State 12:
expression -> expression . PLUS expression [ PLUS MULT END ]
expression -> expression . MULT expression [ PLUS MULT END ]
instruction -> PRINT BEGIN expression . END [ SEMI ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On END shift to state 17

State 13:
expression -> expression PLUS . expression [ PLUS MULT END ]
-- On IDENT shift to state 10
-- On location shift to state 11
-- On expression shift to state 14

State 14:
expression -> expression . PLUS expression [ PLUS MULT END ]
expression -> expression PLUS expression . [ PLUS MULT END ]
expression -> expression . MULT expression [ PLUS MULT END ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On PLUS reduce production expression -> expression PLUS expression 
-- On MULT reduce production expression -> expression PLUS expression 
-- On END reduce production expression -> expression PLUS expression 
** Conflict on PLUS MULT

State 15:
expression -> expression MULT . expression [ PLUS MULT END ]
-- On IDENT shift to state 10
-- On location shift to state 11
-- On expression shift to state 16

State 16:
expression -> expression . PLUS expression [ PLUS MULT END ]
expression -> expression . MULT expression [ PLUS MULT END ]
expression -> expression MULT expression . [ PLUS MULT END ]
-- On PLUS shift to state 13
-- On MULT shift to state 15
-- On PLUS reduce production expression -> expression MULT expression 
-- On MULT reduce production expression -> expression MULT expression 
-- On END reduce production expression -> expression MULT expression 
** Conflict on PLUS MULT

State 17:
instruction -> PRINT BEGIN expression END . [ SEMI ]
-- On SEMI reduce production instruction -> PRINT BEGIN expression END 

State 18:
main -> MAIN BEGIN INT IDENT END BEGIN var_decls instructions . END EOF [ # ]
-- On END shift to state 19

State 19:
main -> MAIN BEGIN INT IDENT END BEGIN var_decls instructions END . EOF [ # ]
-- On EOF shift to state 20

State 20:
main -> MAIN BEGIN INT IDENT END BEGIN var_decls instructions END EOF . [ # ]
-- On # reduce production main -> MAIN BEGIN INT IDENT END BEGIN var_decls instructions END EOF 

State 21:
instructions -> instruction . SEMI instructions [ END ]
-- On SEMI shift to state 22

State 22:
instructions -> instruction SEMI . instructions [ END ]
-- On PRINT shift to state 8
-- On instructions shift to state 23
-- On instruction shift to state 21
-- On END reduce production instructions -> 

State 23:
instructions -> instruction SEMI instructions . [ END ]
-- On END reduce production instructions -> instruction SEMI instructions 

State 24:
main' -> main . [ # ]
-- On # accept main

